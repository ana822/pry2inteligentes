/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgVista;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import pkgModelo.clsJugador;
import pkgModelo.clsTablero;

/**
 *
 * @author Ana
 */
public class pnlTablero extends javax.swing.JPanel implements ActionListener {

    /**
     * Creates new form pnlTablero
     */
    JButton[][] fichas;
    ImageIcon imgvacia = new ImageIcon("src/imagenes/fondo.png");
    ImageIcon imgnegra = new ImageIcon("src/imagenes/ficha_negra.png");
    ImageIcon imgblanca = new ImageIcon("src/imagenes/ficha_blanca.png");
    ImageIcon imgmedionegra = new ImageIcon("src/imagenes/ficha_medionegra.png");
    ImageIcon imgmedioblanca = new ImageIcon("src/imagenes/ficha_medioblanca.png");
    clsTablero tablero;
    clsJugador jugador;
    int[] cantMov;
    int turno;
String [][] jugadas= new String[8][8];
    public pnlTablero() {

        initComponents();
        cantMov = new int[2];
        turno = 1;
        tablero = new clsTablero();
        fichas = new JButton[8][8];
        this.setLayout(new GridLayout(8, 8, 0, 0));
        for (int i = 0; i < fichas.length; i++) {
            for (int j = 0; j < fichas.length; j++) {
                fichas[i][j] = new JButton(imgvacia);
                fichas[i][j].setPreferredSize(new Dimension(44, 44));
                fichas[i][j].setActionCommand("i" + i + j);
                fichas[i][j].addActionListener(this);
                tablero.llenarMatriz();
                tablero.estadoInicial();
//                tablero.mostrar();
                //fichas [i][j].setIcon(imgvacia);

                this.add(fichas[i][j]);
            }
        }

        fichas[3][3].setIcon(imgblanca);
        fichas[3][4].setIcon(imgnegra);
        fichas[4][3].setIcon(imgnegra);
        fichas[4][4].setIcon(imgblanca);
        //-----------------------------------------------------------------
        fichas[3][2].setIcon(imgmedionegra);
        fichas[5][4].setIcon(imgmedionegra);
        fichas[2][3].setIcon(imgmedionegra);
        fichas[4][5].setIcon(imgmedionegra);
        
        //fichas [5][3].setIcon(imgblanca);
        // fichas [5][2].setIcon(imgnegra);
        tablero.llenarPosiblesMovimientosInicial();
        try {
            jugador=new clsJugador();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "SERVIDOR NO DISPONIBLE");
            //Logger.getLogger(pnlTablero.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void actionPerformed(ActionEvent e) {

        int i = Integer.parseInt((e.getActionCommand().subSequence(1, 2).toString()));
        int j = Integer.parseInt((e.getActionCommand().subSequence(2, 3).toString()));

        String ficha = "i" + i + j;
        if (ficha.equals(e.getActionCommand())) {
            if (turno == 1) {
                
                if (tablero.puedoMover(new Point(i, j))) {
                    quitarPosibles();
                    fichas[i][j].setIcon(imgnegra);
                   
                    tablero.ponerFicha(new Point(i, j), "negra");
                    //quitarPosibles();
                    
                    pintarEntrePuntos(tablero.validarMedios(new Point(i, j), "negra"));
                    pintarPosibles(tablero.validarMovimientos("blanca"));
                    //cantMov = jugador.CantidadFichas(tablero.getTablero());
                    
                    turno = 2;
                    if (tablero.tableroLLeno()) {
                        ganador(tablero.getTablero());
                    }
                    System.out.println("estasss sooooon "+ tablero.getTablero()[i][j]);
                   try {
                        //tablero.mostrar();
                       
                        jugadas=jugador.EnviarJuagada(tablero.getTablero());
                        tablero.setTablero(jugadas);
                    } catch (IOException ex) {
                        Logger.getLogger(pnlTablero.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(pnlTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                     
                }
                 
                    
            } else if (turno == 2) {
                if (tablero.puedoMover(new Point(i, j))) {
                    quitarPosibles();
                    fichas[i][j].setIcon(imgblanca);
                     
                    tablero.ponerFicha(new Point(i, j), "blanca");
                    //quitarPosibles();
                    pintarEntrePuntos(tablero.validarMedios(new Point(i, j), "blanca"));
                    pintarPosibles(tablero.validarMovimientos("negra"));
                    
                    //cantMov = jugador.CantidadFichas(tablero.getTablero());
                    turno = 1;
                    //tablero.mostrar();
                    
                     
                }
//                 if(tablero.getMov().isEmpty()){
//                     System.out.println("La maquina no tiene jugada ");
//                    turno=2;
//                }
                try {
                        //tablero.mostrar();
                        jugadas=jugador.EnviarJuagada(tablero.getTablero());
                        tablero.setTablero(jugadas);
                    } catch (IOException ex) {
                        Logger.getLogger(pnlTablero.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(pnlTablero.class.getName()).log(Level.SEVERE, null, ex);
                    }
                 
            }
            if (tablero.tableroLLeno()) {
                        ganador(tablero.getTablero());
                    }
              
        }
    }

    public void pintarPosibles(LinkedList<Point> mov) {
        for (int i = 0; i < mov.size(); i++) {
            if (turno == 1) {
                fichas[(int) mov.get(i).getX()][(int) mov.get(i).getY()].setIcon(imgmedioblanca);
            } else if (turno == 2) {
                fichas[(int) mov.get(i).getX()][(int) mov.get(i).getY()].setIcon(imgmedionegra);
            }
        }
    }

    public void pintarEntrePuntos(LinkedList<Point> f) {
        for (int i = 0; i < f.size(); i++) {
            if (turno == 1) {
                tablero.ponerFicha(new Point((int) f.get(i).getX(), (int) f.get(i).getY()), "negra");
                fichas[(int) f.get(i).getX()][(int) f.get(i).getY()].setIcon(imgnegra);
            } else if (turno == 2) {
                tablero.ponerFicha(new Point((int) f.get(i).getX(), (int) f.get(i).getY()), "blanca");
                fichas[(int) f.get(i).getX()][(int) f.get(i).getY()].setIcon(imgblanca);
            }
        }
    }

    //Quitar posibles movimientos del contrincante   
    public void quitarPosibles() {
        for (int k = 0; k < fichas.length; k++) {
            for (int l = 0; l < fichas.length; l++) {

                if (fichas[k][l].getIcon().equals(imgmedionegra)) {

                    fichas[k][l].setIcon(imgvacia);
                } else if (fichas[k][l].getIcon().equals(imgmedioblanca)) {
                    fichas[k][l].setIcon(imgvacia);
                }
            }

        }
    }

    public void ganador(String[][] tab) {
        int[] mov;

        mov = jugador.CantidadFichas(tab);
        if (mov[0] > mov[1]) {
            JOptionPane.showMessageDialog(this, "Jugador 1 Gana");
        } else if (mov[0] < mov[1]) {
            JOptionPane.showMessageDialog(this, "Game Over");
        } else {
            JOptionPane.showMessageDialog(this, "Empate!!");
        }
    }
    
}
